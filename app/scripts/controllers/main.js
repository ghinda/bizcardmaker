app.controller('MainCtrl', [
'$rootScope', '$scope', '$location', '$timeout', '$q',
function($rootScope, $scope, $location, $timeout, $q) {
  'use strict';

  var model = $scope.model = {};

  model.cardPictureFile = '';
  model.cardPicture = '';

  model.imageData = '';
  model.imageFilename = 'bizcardmaker-com';
  model.imageExt = '.jpg';

  model.pdfData = '';
  model.pdfFilename = 'bizcardmaker-com.pdf';

  model.loadingCard = false;

  var expire = new Date();
  expire.setDate(expire.getDate() + 23);
  model.promoExpire = expire;

  model.storeDefaults = {
    card: {
      name: 'John Doe',
      position: 'Position',
      organization: 'Organization',
      location: 'City, State',
      phone: '(123) 555-1234',
      email: 'john.doe@cmail.com',
      url: 'www.john-doe.com'
    },
    position: {
      picture: {},
      person: {},
      details: {},
      email: {},
      url: {}
    }
  };

  model.store = {
    card: {},
    position: {}
  };

  angular.copy(model.storeDefaults, model.store);

  var storedDetails = window.localStorage.getItem('bizcardmaker-store');

  if(storedDetails) {
    angular.extend(model.store, angular.fromJson(storedDetails));
  }

  // Remy Sharp's debounce
  // https://remysharp.com/2010/07/21/throttling-function-calls
  var debounce = function(fn, delay) {
    var timer = null;
    return function () {
      var context = this, args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        fn.apply(context, args);
      }, delay);
    };
  };

  // save edits to localstorage
  $scope.$watch('model.store', debounce(function(store) {

    window.localStorage.setItem('bizcardmaker-store', angular.toJson(store));

  }, 500), true);

  var clearInlineStyles = function() {
    if (!document.querySelector('.card-preview')) {
      return;
    }

    // clear all inline styles
    // generated by editor and draggable
    var cardChildren = document.querySelector('.card-preview').querySelectorAll('*');
    angular.forEach(cardChildren, function(c) {
      c.removeAttribute('style');
    });
  };

  // reset all saved data
  $scope.ResetCard = function(change) {

    clearInlineStyles();

    if(change) {

      // on change, only reset the positions
      angular.copy(model.storeDefaults.position, model.store.position);

    } else {

      // complete reset
      var previousTheme = model.store.theme;

      angular.copy(model.storeDefaults, model.store);

      // don't reset the currently selected theme
      model.store.theme = previousTheme;
    }


    window.localStorage.removeItem('bizcardmaker-store');

  };

  // if we have a stored theme
  // set it as active.
  if (model.store.theme) {
    $location.search('theme', model.store.theme);
  }

  $scope.$on('$locationChangeStart', function(){
    var theme = $location.search().theme;

    // reset card styles when changing themes
    // except the text data
    if(theme !== model.store.theme) {
      $scope.ResetCard(true);
    }

    model.store.theme = theme;
  });

  $scope.$watch('model.cardPictureFile', function() {

    if(model.cardPictureFile) {

      var imageType = /image.*/;

      if (model.cardPictureFile.type.match(imageType)) {
        var reader = new FileReader();

        reader.onload = function() {

          $timeout(function() {
            model.cardPicture = reader.result;
          });

        };

        reader.readAsDataURL(model.cardPictureFile);

      } else {

        window.alert('File not supported!');

      }

    }

  });

  // place business card on a canvas
  $scope.generatePicture = async function() {
    var deferred = $q.defer();

    // remove text selection, to hide still-open editors
    window.getSelection().removeAllRanges();

    const $card = document.querySelector('.js-card-container');

    model.loadingCard = true;

    $card.classList.add('card-print');

    const result = await snapdom($card, {
      scale: 2.12,
      embedFonts: true,
      compress: false,
    });

    $card.classList.remove('card-print');

    model.loadingCard = false;

    deferred.resolve(result);

    return deferred.promise;
  };

  $scope.DownloadPdf = function() {
    $scope.generatePicture()
    .then(async function (snapdomResult) {
      const canvas = await snapdomResult.toCanvas();
      var imgData = canvas.toDataURL('image/jpeg', 1.0);
      window.GeneratePdf(model.pdfFilename, imgData);
    });
  };

  $scope.DownloadPicture = function() {

    $scope.generatePicture()
    .then(async function(snapdomResult) {

      const filename = model.imageFilename + '-' + model.store.theme;
      await snapdomResult.download({
        format: 'jpg',
        filename: filename,
      });
    });
  };

  var allTemplates = 1;
  var loadedTemplates = 0;
  $scope.$on('$includeContentLoaded', function() {
    // when loading all the includes
    loadedTemplates++;
    if (loadedTemplates !== allTemplates) {
      return;
    }

    // init foundation plugins - modal and dropdown
    $(document.querySelector('.card-editor')).foundation();

    // hack to prevent automatic scrolling from contenteditable
    var $cardContent = document.querySelector('.card-content');
    if($cardContent) {
      /* Feature detection */
      var passiveSupported = false;
      try {
        window.addEventListener('test', null, Object.defineProperty({}, 'passive', { get: function() { passiveSupported = true; } }));
      } catch(err) {}

      $cardContent.addEventListener('scroll', function () {
        $cardContent.scrollTop = 0;
        $cardContent.scrollLeft = 0;
      }, passiveSupported ? {passive: true} : true);
    }

  });

}]);
